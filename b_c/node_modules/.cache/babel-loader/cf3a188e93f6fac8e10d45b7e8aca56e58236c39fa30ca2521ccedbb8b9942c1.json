{"ast":null,"code":";\n(function (root, factory) {\n  if (typeof exports === \"object\") {\n    // CommonJS\n    module.exports = exports = factory(require(\"./core\"));\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"./core\"], factory);\n  } else {\n    // Global (browser)\n    factory(root.CryptoJS);\n  }\n})(this, function (CryptoJS) {\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var C_enc = C.enc;\n    var Utf8 = C_enc.Utf8;\n    var C_algo = C.algo;\n\n    /**\r\n     * HMAC algorithm.\r\n     */\n    var HMAC = C_algo.HMAC = Base.extend({\n      /**\r\n       * Initializes a newly created HMAC.\r\n       *\r\n       * @param {Hasher} hasher The hash algorithm to use.\r\n       * @param {WordArray|string} key The secret key.\r\n       *\r\n       * @example\r\n       *\r\n       *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\r\n       */\n      init: function (hasher, key) {\n        // Init hasher\n        hasher = this._hasher = new hasher.init();\n\n        // Convert string to WordArray, else assume WordArray already\n        if (typeof key == 'string') {\n          key = Utf8.parse(key);\n        }\n\n        // Shortcuts\n        var hasherBlockSize = hasher.blockSize;\n        var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n        // Allow arbitrary length keys\n        if (key.sigBytes > hasherBlockSizeBytes) {\n          key = hasher.finalize(key);\n        }\n\n        // Clamp excess bits\n        key.clamp();\n\n        // Clone key for inner and outer pads\n        var oKey = this._oKey = key.clone();\n        var iKey = this._iKey = key.clone();\n\n        // Shortcuts\n        var oKeyWords = oKey.words;\n        var iKeyWords = iKey.words;\n\n        // XOR keys with pad constants\n        for (var i = 0; i < hasherBlockSize; i++) {\n          oKeyWords[i] ^= 0x5c5c5c5c;\n          iKeyWords[i] ^= 0x36363636;\n        }\n        oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n        // Set initial values\n        this.reset();\n      },\n      /**\r\n       * Resets this HMAC to its initial state.\r\n       *\r\n       * @example\r\n       *\r\n       *     hmacHasher.reset();\r\n       */\n      reset: function () {\n        // Shortcut\n        var hasher = this._hasher;\n\n        // Reset\n        hasher.reset();\n        hasher.update(this._iKey);\n      },\n      /**\r\n       * Updates this HMAC with a message.\r\n       *\r\n       * @param {WordArray|string} messageUpdate The message to append.\r\n       *\r\n       * @return {HMAC} This HMAC instance.\r\n       *\r\n       * @example\r\n       *\r\n       *     hmacHasher.update('message');\r\n       *     hmacHasher.update(wordArray);\r\n       */\n      update: function (messageUpdate) {\n        this._hasher.update(messageUpdate);\n\n        // Chainable\n        return this;\n      },\n      /**\r\n       * Finalizes the HMAC computation.\r\n       * Note that the finalize operation is effectively a destructive, read-once operation.\r\n       *\r\n       * @param {WordArray|string} messageUpdate (Optional) A final message update.\r\n       *\r\n       * @return {WordArray} The HMAC.\r\n       *\r\n       * @example\r\n       *\r\n       *     var hmac = hmacHasher.finalize();\r\n       *     var hmac = hmacHasher.finalize('message');\r\n       *     var hmac = hmacHasher.finalize(wordArray);\r\n       */\n      finalize: function (messageUpdate) {\n        // Shortcut\n        var hasher = this._hasher;\n\n        // Compute HMAC\n        var innerHash = hasher.finalize(messageUpdate);\n        hasher.reset();\n        var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n        return hmac;\n      }\n    });\n  })();\n});","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}