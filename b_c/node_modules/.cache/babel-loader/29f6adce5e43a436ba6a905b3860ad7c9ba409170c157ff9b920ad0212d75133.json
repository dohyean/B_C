{"ast":null,"code":"// sign_up_function.js\nconst sockets = require(\"../../Component/moudle/sockets.js\");\nconst Return_Success = 0;\nconst Return_Duplicate_ID = 1;\nconst Return_Error = 2;\nasync function Check_Sign_Up(formData, setFormData, navigate) {\n  try {\n    var SignUp_Server_Result = await sockets.SignUp_Server(formData);\n    switch (SignUp_Server_Result.SignUp_Server_Result) {\n      case Return_Success:\n        setFormData({\n          ID: \"\",\n          PW: \"\",\n          confirmPW: \"\",\n          nickname: \"\",\n          name: \"\",\n          Phone: \"\",\n          Birth: \"\"\n        });\n        alert(\"회원가입 완료.\");\n        navigate(\"/Login\");\n        break;\n      case Return_Duplicate_ID:\n        alert(\"아이디 중복.\");\n        break;\n      case Return_Error:\n        alert(\"오류.\");\n        break;\n      default:\n        alert(\"관리자에게 문의하세요.\");\n        break;\n    }\n  } catch (err) {\n    console.log(\"Sign-up error: \", err);\n    alert(\"서버 오류. 다시 시도해 주세요.\");\n  } finally {\n    // sockets.Disconnect();\n  }\n}\n_c = Check_Sign_Up;\nexport async function Sign_Up(formData, setFormData, navigate) {\n  await Check_Sign_Up(formData, setFormData, navigate);\n}\n_c2 = Sign_Up;\nvar _c, _c2;\n$RefreshReg$(_c, \"Check_Sign_Up\");\n$RefreshReg$(_c2, \"Sign_Up\");","map":{"version":3,"names":["sockets","require","Return_Success","Return_Duplicate_ID","Return_Error","Check_Sign_Up","formData","setFormData","navigate","SignUp_Server_Result","SignUp_Server","ID","PW","confirmPW","nickname","name","Phone","Birth","alert","err","console","log","_c","Sign_Up","_c2","$RefreshReg$"],"sources":["C:/Users/junsung/OneDrive/문서/GitHub/B_C/b_c/src/Function/SignUp/Sign_up.js"],"sourcesContent":["// sign_up_function.js\r\nconst sockets = require(\"../../Component/moudle/sockets.js\");\r\nconst Return_Success = 0;\r\nconst Return_Duplicate_ID = 1;\r\nconst Return_Error = 2;\r\n\r\nasync function Check_Sign_Up(formData, setFormData, navigate) {\r\n  try {\r\n    var SignUp_Server_Result = await sockets.SignUp_Server(formData);\r\n    switch (SignUp_Server_Result.SignUp_Server_Result) {\r\n      case Return_Success:\r\n        setFormData({\r\n          ID: \"\",\r\n          PW: \"\",\r\n          confirmPW: \"\",\r\n          nickname: \"\",\r\n          name: \"\",\r\n          Phone: \"\",\r\n          Birth: \"\",\r\n        });\r\n        alert(\"회원가입 완료.\");\r\n        navigate(\"/Login\");\r\n        break;\r\n      case Return_Duplicate_ID:\r\n        alert(\"아이디 중복.\");\r\n        break;\r\n      case Return_Error:\r\n        alert(\"오류.\");\r\n        break;\r\n      default:\r\n        alert(\"관리자에게 문의하세요.\");\r\n        break;\r\n    }\r\n  } catch (err) {\r\n    console.log(\"Sign-up error: \", err);\r\n    alert(\"서버 오류. 다시 시도해 주세요.\");\r\n  } finally {\r\n    // sockets.Disconnect();\r\n  }\r\n}\r\n\r\nexport async function Sign_Up(formData, setFormData, navigate) {\r\n  await Check_Sign_Up(formData, setFormData, navigate);\r\n}\r\n"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,mCAAmC,CAAC;AAC5D,MAAMC,cAAc,GAAG,CAAC;AACxB,MAAMC,mBAAmB,GAAG,CAAC;AAC7B,MAAMC,YAAY,GAAG,CAAC;AAEtB,eAAeC,aAAaA,CAACC,QAAQ,EAAEC,WAAW,EAAEC,QAAQ,EAAE;EAC5D,IAAI;IACF,IAAIC,oBAAoB,GAAG,MAAMT,OAAO,CAACU,aAAa,CAACJ,QAAQ,CAAC;IAChE,QAAQG,oBAAoB,CAACA,oBAAoB;MAC/C,KAAKP,cAAc;QACjBK,WAAW,CAAC;UACVI,EAAE,EAAE,EAAE;UACNC,EAAE,EAAE,EAAE;UACNC,SAAS,EAAE,EAAE;UACbC,QAAQ,EAAE,EAAE;UACZC,IAAI,EAAE,EAAE;UACRC,KAAK,EAAE,EAAE;UACTC,KAAK,EAAE;QACT,CAAC,CAAC;QACFC,KAAK,CAAC,UAAU,CAAC;QACjBV,QAAQ,CAAC,QAAQ,CAAC;QAClB;MACF,KAAKL,mBAAmB;QACtBe,KAAK,CAAC,SAAS,CAAC;QAChB;MACF,KAAKd,YAAY;QACfc,KAAK,CAAC,KAAK,CAAC;QACZ;MACF;QACEA,KAAK,CAAC,cAAc,CAAC;QACrB;IACJ;EACF,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,GAAG,CAAC;IACnCD,KAAK,CAAC,oBAAoB,CAAC;EAC7B,CAAC,SAAS;IACR;EAAA;AAEJ;AAACI,EAAA,GAjCcjB,aAAa;AAmC5B,OAAO,eAAekB,OAAOA,CAACjB,QAAQ,EAAEC,WAAW,EAAEC,QAAQ,EAAE;EAC7D,MAAMH,aAAa,CAACC,QAAQ,EAAEC,WAAW,EAAEC,QAAQ,CAAC;AACtD;AAACgB,GAAA,GAFqBD,OAAO;AAAA,IAAAD,EAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAH,EAAA;AAAAG,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}