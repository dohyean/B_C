{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AttributeMap = exports.OpIterator = exports.Op = void 0;\nconst diff = require(\"fast-diff\");\nconst cloneDeep = require(\"lodash.clonedeep\");\nconst isEqual = require(\"lodash.isequal\");\nconst AttributeMap_1 = require(\"./AttributeMap\");\nexports.AttributeMap = AttributeMap_1.default;\nconst Op_1 = require(\"./Op\");\nexports.Op = Op_1.default;\nconst OpIterator_1 = require(\"./OpIterator\");\nexports.OpIterator = OpIterator_1.default;\nconst NULL_CHARACTER = String.fromCharCode(0); // Placeholder char for embed in diff()\nconst getEmbedTypeAndData = (a, b) => {\n  if (typeof a !== 'object' || a === null) {\n    throw new Error(`cannot retain a ${typeof a}`);\n  }\n  if (typeof b !== 'object' || b === null) {\n    throw new Error(`cannot retain a ${typeof b}`);\n  }\n  const embedType = Object.keys(a)[0];\n  if (!embedType || embedType !== Object.keys(b)[0]) {\n    throw new Error(`embed types not matched: ${embedType} != ${Object.keys(b)[0]}`);\n  }\n  return [embedType, a[embedType], b[embedType]];\n};\nclass Delta {\n  constructor(ops) {\n    // Assume we are given a well formed ops\n    if (Array.isArray(ops)) {\n      this.ops = ops;\n    } else if (ops != null && Array.isArray(ops.ops)) {\n      this.ops = ops.ops;\n    } else {\n      this.ops = [];\n    }\n  }\n  static registerEmbed(embedType, handler) {\n    this.handlers[embedType] = handler;\n  }\n  static unregisterEmbed(embedType) {\n    delete this.handlers[embedType];\n  }\n  static getHandler(embedType) {\n    const handler = this.handlers[embedType];\n    if (!handler) {\n      throw new Error(`no handlers for embed type \"${embedType}\"`);\n    }\n    return handler;\n  }\n  insert(arg, attributes) {\n    const newOp = {};\n    if (typeof arg === 'string' && arg.length === 0) {\n      return this;\n    }\n    newOp.insert = arg;\n    if (attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0) {\n      newOp.attributes = attributes;\n    }\n    return this.push(newOp);\n  }\n  delete(length) {\n    if (length <= 0) {\n      return this;\n    }\n    return this.push({\n      delete: length\n    });\n  }\n  retain(length, attributes) {\n    if (typeof length === 'number' && length <= 0) {\n      return this;\n    }\n    const newOp = {\n      retain: length\n    };\n    if (attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0) {\n      newOp.attributes = attributes;\n    }\n    return this.push(newOp);\n  }\n  push(newOp) {\n    let index = this.ops.length;\n    let lastOp = this.ops[index - 1];\n    newOp = cloneDeep(newOp);\n    if (typeof lastOp === 'object') {\n      if (typeof newOp.delete === 'number' && typeof lastOp.delete === 'number') {\n        this.ops[index - 1] = {\n          delete: lastOp.delete + newOp.delete\n        };\n        return this;\n      }\n      // Since it does not matter if we insert before or after deleting at the same index,\n      // always prefer to insert first\n      if (typeof lastOp.delete === 'number' && newOp.insert != null) {\n        index -= 1;\n        lastOp = this.ops[index - 1];\n        if (typeof lastOp !== 'object') {\n          this.ops.unshift(newOp);\n          return this;\n        }\n      }\n      if (isEqual(newOp.attributes, lastOp.attributes)) {\n        if (typeof newOp.insert === 'string' && typeof lastOp.insert === 'string') {\n          this.ops[index - 1] = {\n            insert: lastOp.insert + newOp.insert\n          };\n          if (typeof newOp.attributes === 'object') {\n            this.ops[index - 1].attributes = newOp.attributes;\n          }\n          return this;\n        } else if (typeof newOp.retain === 'number' && typeof lastOp.retain === 'number') {\n          this.ops[index - 1] = {\n            retain: lastOp.retain + newOp.retain\n          };\n          if (typeof newOp.attributes === 'object') {\n            this.ops[index - 1].attributes = newOp.attributes;\n          }\n          return this;\n        }\n      }\n    }\n    if (index === this.ops.length) {\n      this.ops.push(newOp);\n    } else {\n      this.ops.splice(index, 0, newOp);\n    }\n    return this;\n  }\n  chop() {\n    const lastOp = this.ops[this.ops.length - 1];\n    if (lastOp && typeof lastOp.retain === 'number' && !lastOp.attributes) {\n      this.ops.pop();\n    }\n    return this;\n  }\n  filter(predicate) {\n    return this.ops.filter(predicate);\n  }\n  forEach(predicate) {\n    this.ops.forEach(predicate);\n  }\n  map(predicate) {\n    return this.ops.map(predicate);\n  }\n  partition(predicate) {\n    const passed = [];\n    const failed = [];\n    this.forEach(op => {\n      const target = predicate(op) ? passed : failed;\n      target.push(op);\n    });\n    return [passed, failed];\n  }\n  reduce(predicate, initialValue) {\n    return this.ops.reduce(predicate, initialValue);\n  }\n  changeLength() {\n    return this.reduce((length, elem) => {\n      if (elem.insert) {\n        return length + Op_1.default.length(elem);\n      } else if (elem.delete) {\n        return length - elem.delete;\n      }\n      return length;\n    }, 0);\n  }\n  length() {\n    return this.reduce((length, elem) => {\n      return length + Op_1.default.length(elem);\n    }, 0);\n  }\n  slice(start = 0, end = Infinity) {\n    const ops = [];\n    const iter = new OpIterator_1.default(this.ops);\n    let index = 0;\n    while (index < end && iter.hasNext()) {\n      let nextOp;\n      if (index < start) {\n        nextOp = iter.next(start - index);\n      } else {\n        nextOp = iter.next(end - index);\n        ops.push(nextOp);\n      }\n      index += Op_1.default.length(nextOp);\n    }\n    return new Delta(ops);\n  }\n  compose(other) {\n    const thisIter = new OpIterator_1.default(this.ops);\n    const otherIter = new OpIterator_1.default(other.ops);\n    const ops = [];\n    const firstOther = otherIter.peek();\n    if (firstOther != null && typeof firstOther.retain === 'number' && firstOther.attributes == null) {\n      let firstLeft = firstOther.retain;\n      while (thisIter.peekType() === 'insert' && thisIter.peekLength() <= firstLeft) {\n        firstLeft -= thisIter.peekLength();\n        ops.push(thisIter.next());\n      }\n      if (firstOther.retain - firstLeft > 0) {\n        otherIter.next(firstOther.retain - firstLeft);\n      }\n    }\n    const delta = new Delta(ops);\n    while (thisIter.hasNext() || otherIter.hasNext()) {\n      if (otherIter.peekType() === 'insert') {\n        delta.push(otherIter.next());\n      } else if (thisIter.peekType() === 'delete') {\n        delta.push(thisIter.next());\n      } else {\n        const length = Math.min(thisIter.peekLength(), otherIter.peekLength());\n        const thisOp = thisIter.next(length);\n        const otherOp = otherIter.next(length);\n        if (otherOp.retain) {\n          const newOp = {};\n          if (typeof thisOp.retain === 'number') {\n            newOp.retain = typeof otherOp.retain === 'number' ? length : otherOp.retain;\n          } else {\n            if (typeof otherOp.retain === 'number') {\n              if (thisOp.retain == null) {\n                newOp.insert = thisOp.insert;\n              } else {\n                newOp.retain = thisOp.retain;\n              }\n            } else {\n              const action = thisOp.retain == null ? 'insert' : 'retain';\n              const [embedType, thisData, otherData] = getEmbedTypeAndData(thisOp[action], otherOp.retain);\n              const handler = Delta.getHandler(embedType);\n              newOp[action] = {\n                [embedType]: handler.compose(thisData, otherData, action === 'retain')\n              };\n            }\n          }\n          // Preserve null when composing with a retain, otherwise remove it for inserts\n          const attributes = AttributeMap_1.default.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === 'number');\n          if (attributes) {\n            newOp.attributes = attributes;\n          }\n          delta.push(newOp);\n          // Optimization if rest of other is just retain\n          if (!otherIter.hasNext() && isEqual(delta.ops[delta.ops.length - 1], newOp)) {\n            const rest = new Delta(thisIter.rest());\n            return delta.concat(rest).chop();\n          }\n          // Other op should be delete, we could be an insert or retain\n          // Insert + delete cancels out\n        } else if (typeof otherOp.delete === 'number' && (typeof thisOp.retain === 'number' || typeof thisOp.retain === 'object' && thisOp.retain !== null)) {\n          delta.push(otherOp);\n        }\n      }\n    }\n    return delta.chop();\n  }\n  concat(other) {\n    const delta = new Delta(this.ops.slice());\n    if (other.ops.length > 0) {\n      delta.push(other.ops[0]);\n      delta.ops = delta.ops.concat(other.ops.slice(1));\n    }\n    return delta;\n  }\n  diff(other, cursor) {\n    if (this.ops === other.ops) {\n      return new Delta();\n    }\n    const strings = [this, other].map(delta => {\n      return delta.map(op => {\n        if (op.insert != null) {\n          return typeof op.insert === 'string' ? op.insert : NULL_CHARACTER;\n        }\n        const prep = delta === other ? 'on' : 'with';\n        throw new Error('diff() called ' + prep + ' non-document');\n      }).join('');\n    });\n    const retDelta = new Delta();\n    const diffResult = diff(strings[0], strings[1], cursor, true);\n    const thisIter = new OpIterator_1.default(this.ops);\n    const otherIter = new OpIterator_1.default(other.ops);\n    diffResult.forEach(component => {\n      let length = component[1].length;\n      while (length > 0) {\n        let opLength = 0;\n        switch (component[0]) {\n          case diff.INSERT:\n            opLength = Math.min(otherIter.peekLength(), length);\n            retDelta.push(otherIter.next(opLength));\n            break;\n          case diff.DELETE:\n            opLength = Math.min(length, thisIter.peekLength());\n            thisIter.next(opLength);\n            retDelta.delete(opLength);\n            break;\n          case diff.EQUAL:\n            opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);\n            const thisOp = thisIter.next(opLength);\n            const otherOp = otherIter.next(opLength);\n            if (isEqual(thisOp.insert, otherOp.insert)) {\n              retDelta.retain(opLength, AttributeMap_1.default.diff(thisOp.attributes, otherOp.attributes));\n            } else {\n              retDelta.push(otherOp).delete(opLength);\n            }\n            break;\n        }\n        length -= opLength;\n      }\n    });\n    return retDelta.chop();\n  }\n  eachLine(predicate, newline = '\\n') {\n    const iter = new OpIterator_1.default(this.ops);\n    let line = new Delta();\n    let i = 0;\n    while (iter.hasNext()) {\n      if (iter.peekType() !== 'insert') {\n        return;\n      }\n      const thisOp = iter.peek();\n      const start = Op_1.default.length(thisOp) - iter.peekLength();\n      const index = typeof thisOp.insert === 'string' ? thisOp.insert.indexOf(newline, start) - start : -1;\n      if (index < 0) {\n        line.push(iter.next());\n      } else if (index > 0) {\n        line.push(iter.next(index));\n      } else {\n        if (predicate(line, iter.next(1).attributes || {}, i) === false) {\n          return;\n        }\n        i += 1;\n        line = new Delta();\n      }\n    }\n    if (line.length() > 0) {\n      predicate(line, {}, i);\n    }\n  }\n  invert(base) {\n    const inverted = new Delta();\n    this.reduce((baseIndex, op) => {\n      if (op.insert) {\n        inverted.delete(Op_1.default.length(op));\n      } else if (typeof op.retain === 'number' && op.attributes == null) {\n        inverted.retain(op.retain);\n        return baseIndex + op.retain;\n      } else if (op.delete || typeof op.retain === 'number') {\n        const length = op.delete || op.retain;\n        const slice = base.slice(baseIndex, baseIndex + length);\n        slice.forEach(baseOp => {\n          if (op.delete) {\n            inverted.push(baseOp);\n          } else if (op.retain && op.attributes) {\n            inverted.retain(Op_1.default.length(baseOp), AttributeMap_1.default.invert(op.attributes, baseOp.attributes));\n          }\n        });\n        return baseIndex + length;\n      } else if (typeof op.retain === 'object' && op.retain !== null) {\n        const slice = base.slice(baseIndex, baseIndex + 1);\n        const baseOp = new OpIterator_1.default(slice.ops).next();\n        const [embedType, opData, baseOpData] = getEmbedTypeAndData(op.retain, baseOp.insert);\n        const handler = Delta.getHandler(embedType);\n        inverted.retain({\n          [embedType]: handler.invert(opData, baseOpData)\n        }, AttributeMap_1.default.invert(op.attributes, baseOp.attributes));\n        return baseIndex + 1;\n      }\n      return baseIndex;\n    }, 0);\n    return inverted.chop();\n  }\n  transform(arg, priority = false) {\n    priority = !!priority;\n    if (typeof arg === 'number') {\n      return this.transformPosition(arg, priority);\n    }\n    const other = arg;\n    const thisIter = new OpIterator_1.default(this.ops);\n    const otherIter = new OpIterator_1.default(other.ops);\n    const delta = new Delta();\n    while (thisIter.hasNext() || otherIter.hasNext()) {\n      if (thisIter.peekType() === 'insert' && (priority || otherIter.peekType() !== 'insert')) {\n        delta.retain(Op_1.default.length(thisIter.next()));\n      } else if (otherIter.peekType() === 'insert') {\n        delta.push(otherIter.next());\n      } else {\n        const length = Math.min(thisIter.peekLength(), otherIter.peekLength());\n        const thisOp = thisIter.next(length);\n        const otherOp = otherIter.next(length);\n        if (thisOp.delete) {\n          // Our delete either makes their delete redundant or removes their retain\n          continue;\n        } else if (otherOp.delete) {\n          delta.push(otherOp);\n        } else {\n          const thisData = thisOp.retain;\n          const otherData = otherOp.retain;\n          let transformedData = typeof otherData === 'object' && otherData !== null ? otherData : length;\n          if (typeof thisData === 'object' && thisData !== null && typeof otherData === 'object' && otherData !== null) {\n            const embedType = Object.keys(thisData)[0];\n            if (embedType === Object.keys(otherData)[0]) {\n              const handler = Delta.getHandler(embedType);\n              if (handler) {\n                transformedData = {\n                  [embedType]: handler.transform(thisData[embedType], otherData[embedType], priority)\n                };\n              }\n            }\n          }\n          // We retain either their retain or insert\n          delta.retain(transformedData, AttributeMap_1.default.transform(thisOp.attributes, otherOp.attributes, priority));\n        }\n      }\n    }\n    return delta.chop();\n  }\n  transformPosition(index, priority = false) {\n    priority = !!priority;\n    const thisIter = new OpIterator_1.default(this.ops);\n    let offset = 0;\n    while (thisIter.hasNext() && offset <= index) {\n      const length = thisIter.peekLength();\n      const nextType = thisIter.peekType();\n      thisIter.next();\n      if (nextType === 'delete') {\n        index -= Math.min(length, index - offset);\n        continue;\n      } else if (nextType === 'insert' && (offset < index || !priority)) {\n        index += length;\n      }\n      offset += length;\n    }\n    return index;\n  }\n}\nDelta.Op = Op_1.default;\nDelta.OpIterator = OpIterator_1.default;\nDelta.AttributeMap = AttributeMap_1.default;\nDelta.handlers = {};\nexports.default = Delta;\nif (typeof module === 'object') {\n  module.exports = Delta;\n  module.exports.default = Delta;\n}\n//# sourceMappingURL=Delta.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}