{"ast":null,"code":"import apply from './_apply.js';\nimport createCtor from './_createCtor.js';\nimport root from './_root.js';\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1;\n\n/**\r\n * Creates a function that wraps `func` to invoke it with the `this` binding\r\n * of `thisArg` and `partials` prepended to the arguments it receives.\r\n *\r\n * @private\r\n * @param {Function} func The function to wrap.\r\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\r\n * @param {*} thisArg The `this` binding of `func`.\r\n * @param {Array} partials The arguments to prepend to those provided to\r\n *  the new function.\r\n * @returns {Function} Returns the new wrapped function.\r\n */\nfunction createPartial(func, bitmask, thisArg, partials) {\n  var isBind = bitmask & WRAP_BIND_FLAG,\n    Ctor = createCtor(func);\n  function wrapper() {\n    var argsIndex = -1,\n      argsLength = arguments.length,\n      leftIndex = -1,\n      leftLength = partials.length,\n      args = Array(leftLength + argsLength),\n      fn = this && this !== root && this instanceof wrapper ? Ctor : func;\n    while (++leftIndex < leftLength) {\n      args[leftIndex] = partials[leftIndex];\n    }\n    while (argsLength--) {\n      args[leftIndex++] = arguments[++argsIndex];\n    }\n    return apply(fn, isBind ? thisArg : this, args);\n  }\n  return wrapper;\n}\nexport default createPartial;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}