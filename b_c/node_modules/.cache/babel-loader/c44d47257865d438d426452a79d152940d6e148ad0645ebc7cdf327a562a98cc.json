{"ast":null,"code":"const sockets = require(\"../../Component/moudle/sockets.js\");\nconst Return_Select_Error = 2;\nconst Return_Select_Match = 0;\nconst Return_Select_Undefined = 1;\nasync function Login(formData, setFormData, navigate) {\n  try {\n    const Login_Server_Result = await sockets.Login_Server(formData);\n    console.log(Login_Server_Result.Login_Result.result); // 데이터 저장 확인 (닉네임도 가져옴)\n    const loginResult = Login_Server_Result.Login_Result.result[0]; // 배열의 첫 번째 요소에 접근\n    const nickname = loginResult.User_NickName; // User_NickName 가져오기\n    console.log(\"닉네임 : \", nickname); //닉네인 되는지 로그 찍기\n\n    switch (Login_Server_Result.Login_Result.result_num) {\n      case Return_Select_Undefined:\n        alert(\"비밀번호 틀림.\");\n        break;\n      case Return_Select_Match:\n        alert(\"로그인 완료.\");\n        setFormData({\n          ID: \"\",\n          PW: \"\"\n        });\n        // 닉네임을 로컬 스토리지에 저장\n        localStorage.setItem(\"nickname\", nickname);\n        navigate(\"/HomePageLogin\");\n        break;\n      case Return_Select_Error:\n        alert(\"오류.\");\n        break;\n      default:\n        alert(\"관리자에게 문의하세요.\");\n        break;\n    }\n  } catch (err) {\n    console.log(\"Sign-up error: \", err);\n    alert(\"서버 오류. 다시 시도해 주세요.\");\n  }\n}\n_c = Login;\nasync function GetHash(formData, setFormData, navigate) {\n  try {\n    const GetHash_Server_Result = await sockets.GetHash_Server(formData);\n    console.log(GetHash_Server_Result.GetHash_Result);\n    switch (GetHash_Server_Result.GetHash_Result.GetHash_return_result_num) {\n      case Return_Select_Undefined:\n        alert(\"해당하는 아이디가 없음.\");\n        break;\n      case Return_Select_Match:\n        const key = GetHash_Server_Result.GetHash_Result.GetHash_return_result[0].User_Hash;\n        formData.key = key;\n        await Login(formData, setFormData, navigate);\n        break;\n      case Return_Select_Error:\n        alert(\"오류.\");\n        break;\n      default:\n        alert(\"관리자에게 문의하세요.\");\n        break;\n    }\n  } catch (err) {\n    console.log(\"Sign-up error: \", err);\n    alert(\"서버 오류. 다시 시도해 주세요.\");\n  } finally {\n    // sockets.Disconnect();\n  }\n}\n_c2 = GetHash;\nasync function Check_Log_in(formData, setFormData, navigate) {\n  try {\n    GetHash(formData, setFormData, navigate);\n  } catch (err) {\n    console.log(\"Sign-up error: \", err);\n    alert(\"서버 오류. 다시 시도해 주세요.\");\n  } finally {\n    // sockets.Disconnect();\n  }\n}\n_c3 = Check_Log_in;\nexport async function Log_in(formData, setFormData, navigate) {\n  await Check_Log_in(formData, setFormData, navigate);\n}\n_c4 = Log_in;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Login\");\n$RefreshReg$(_c2, \"GetHash\");\n$RefreshReg$(_c3, \"Check_Log_in\");\n$RefreshReg$(_c4, \"Log_in\");","map":{"version":3,"names":["sockets","require","Return_Select_Error","Return_Select_Match","Return_Select_Undefined","Login","formData","setFormData","navigate","Login_Server_Result","Login_Server","console","log","Login_Result","result","loginResult","nickname","User_NickName","result_num","alert","ID","PW","localStorage","setItem","err","_c","GetHash","GetHash_Server_Result","GetHash_Server","GetHash_Result","GetHash_return_result_num","key","GetHash_return_result","User_Hash","_c2","Check_Log_in","_c3","Log_in","_c4","$RefreshReg$"],"sources":["C:/Users/gkscj/Desktop/web 프로젝트/B_C/b_c/src/Function/Login/Log_in.js"],"sourcesContent":["const sockets = require(\"../../Component/moudle/sockets.js\");\r\n\r\nconst Return_Select_Error = 2;\r\nconst Return_Select_Match = 0;\r\nconst Return_Select_Undefined = 1;\r\n\r\nasync function Login(formData, setFormData, navigate) {\r\n  try {\r\n    const Login_Server_Result = await sockets.Login_Server(formData);\r\n    console.log(Login_Server_Result.Login_Result.result); // 데이터 저장 확인 (닉네임도 가져옴)\r\n    const loginResult = Login_Server_Result.Login_Result.result[0]; // 배열의 첫 번째 요소에 접근\r\n    const nickname = loginResult.User_NickName; // User_NickName 가져오기\r\n    console.log(\"닉네임 : \", nickname); //닉네인 되는지 로그 찍기\r\n\r\n    switch (Login_Server_Result.Login_Result.result_num) {\r\n      case Return_Select_Undefined:\r\n        alert(\"비밀번호 틀림.\");\r\n        break;\r\n      case Return_Select_Match:\r\n        alert(\"로그인 완료.\");\r\n        setFormData({\r\n          ID: \"\",\r\n          PW: \"\",\r\n        });\r\n        // 닉네임을 로컬 스토리지에 저장\r\n        localStorage.setItem(\"nickname\", nickname);\r\n        navigate(\"/HomePageLogin\");\r\n        break;\r\n      case Return_Select_Error:\r\n        alert(\"오류.\");\r\n        break;\r\n      default:\r\n        alert(\"관리자에게 문의하세요.\");\r\n        break;\r\n    }\r\n  } catch (err) {\r\n    console.log(\"Sign-up error: \", err);\r\n    alert(\"서버 오류. 다시 시도해 주세요.\");\r\n  }\r\n}\r\n\r\nasync function GetHash(formData, setFormData, navigate) {\r\n  try {\r\n    const GetHash_Server_Result = await sockets.GetHash_Server(formData);\r\n    console.log(GetHash_Server_Result.GetHash_Result);\r\n    switch (GetHash_Server_Result.GetHash_Result.GetHash_return_result_num) {\r\n      case Return_Select_Undefined:\r\n        alert(\"해당하는 아이디가 없음.\");\r\n        break;\r\n      case Return_Select_Match:\r\n        const key =\r\n          GetHash_Server_Result.GetHash_Result.GetHash_return_result[0]\r\n            .User_Hash;\r\n        formData.key = key;\r\n        await Login(formData, setFormData, navigate);\r\n        break;\r\n      case Return_Select_Error:\r\n        alert(\"오류.\");\r\n        break;\r\n      default:\r\n        alert(\"관리자에게 문의하세요.\");\r\n        break;\r\n    }\r\n  } catch (err) {\r\n    console.log(\"Sign-up error: \", err);\r\n    alert(\"서버 오류. 다시 시도해 주세요.\");\r\n  } finally {\r\n    // sockets.Disconnect();\r\n  }\r\n}\r\n\r\nasync function Check_Log_in(formData, setFormData, navigate) {\r\n  try {\r\n    GetHash(formData, setFormData, navigate);\r\n  } catch (err) {\r\n    console.log(\"Sign-up error: \", err);\r\n    alert(\"서버 오류. 다시 시도해 주세요.\");\r\n  } finally {\r\n    // sockets.Disconnect();\r\n  }\r\n}\r\n\r\nexport async function Log_in(formData, setFormData, navigate) {\r\n  await Check_Log_in(formData, setFormData, navigate);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}