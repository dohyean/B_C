{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst Op_1 = require(\"./Op\");\nclass Iterator {\n  constructor(ops) {\n    this.ops = ops;\n    this.index = 0;\n    this.offset = 0;\n  }\n  hasNext() {\n    return this.peekLength() < Infinity;\n  }\n  next(length) {\n    if (!length) {\n      length = Infinity;\n    }\n    const nextOp = this.ops[this.index];\n    if (nextOp) {\n      const offset = this.offset;\n      const opLength = Op_1.default.length(nextOp);\n      if (length >= opLength - offset) {\n        length = opLength - offset;\n        this.index += 1;\n        this.offset = 0;\n      } else {\n        this.offset += length;\n      }\n      if (typeof nextOp.delete === 'number') {\n        return {\n          delete: length\n        };\n      } else {\n        const retOp = {};\n        if (nextOp.attributes) {\n          retOp.attributes = nextOp.attributes;\n        }\n        if (typeof nextOp.retain === 'number') {\n          retOp.retain = length;\n        } else if (typeof nextOp.retain === 'object' && nextOp.retain !== null) {\n          // offset should === 0, length should === 1\n          retOp.retain = nextOp.retain;\n        } else if (typeof nextOp.insert === 'string') {\n          retOp.insert = nextOp.insert.substr(offset, length);\n        } else {\n          // offset should === 0, length should === 1\n          retOp.insert = nextOp.insert;\n        }\n        return retOp;\n      }\n    } else {\n      return {\n        retain: Infinity\n      };\n    }\n  }\n  peek() {\n    return this.ops[this.index];\n  }\n  peekLength() {\n    if (this.ops[this.index]) {\n      // Should never return 0 if our index is being managed correctly\n      return Op_1.default.length(this.ops[this.index]) - this.offset;\n    } else {\n      return Infinity;\n    }\n  }\n  peekType() {\n    const op = this.ops[this.index];\n    if (op) {\n      if (typeof op.delete === 'number') {\n        return 'delete';\n      } else if (typeof op.retain === 'number' || typeof op.retain === 'object' && op.retain !== null) {\n        return 'retain';\n      } else {\n        return 'insert';\n      }\n    }\n    return 'retain';\n  }\n  rest() {\n    if (!this.hasNext()) {\n      return [];\n    } else if (this.offset === 0) {\n      return this.ops.slice(this.index);\n    } else {\n      const offset = this.offset;\n      const index = this.index;\n      const next = this.next();\n      const rest = this.ops.slice(this.index);\n      this.offset = offset;\n      this.index = index;\n      return [next].concat(rest);\n    }\n  }\n}\nexports.default = Iterator;\n//# sourceMappingURL=OpIterator.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}