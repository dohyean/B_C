{"ast":null,"code":"// sign_up_function.js\nexport const Sign_Up = (formData, setFormData, navigate) => {\n  var passwordRegex = /^(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[!@#$%^&*?_]).{8,32}$/;\n  for (let key in formData) {\n    if (formData[key] === \"\") {\n      var key_info = \"\";\n      if (key === \"ID\") key_info = \"아이디\";else if (key === \"PW\") key_info = \"비밀번호\";else if (key === \"confirmPW\") key_info = \"비밀번호 재입력\";else if (key === \"nickname\") key_info = \"별명\";else if (key === \"name\") key_info = \"이름\";else if (key === \"Phone\") key_info = \"전화번호\";else if (key === \"Birth\") key_info = \"생년월일\";\n      const strings = key_info + \"를(을) 입력해주세요\";\n      alert(strings);\n      return;\n    }\n  }\n  if (!passwordRegex.test(formData.PW)) {\n    alert(\"비밀번호는 8~32자 이내의 영문자, 숫자 및 특수 문자를 포함해야 합니다.\");\n    return;\n  }\n  if (formData.PW !== formData.confirmPW) {\n    alert(\"비밀번호가 일치하지 않습니다.\");\n    return;\n  }\n  alert(JSON.stringify(formData));\n\n  // 회원 가입 성공 시 초기화\n  setFormData({\n    ID: \"\",\n    PW: \"\",\n    confirmPW: \"\",\n    nickname: \"\",\n    name: \"\",\n    Phone: \"\",\n    Birth: \"\"\n  });\n  alert(\"회원가입 완료\");\n  navigate(\"/Login\");\n};\n_c = Sign_Up;\nvar _c;\n$RefreshReg$(_c, \"Sign_Up\");","map":{"version":3,"names":["Sign_Up","formData","setFormData","navigate","passwordRegex","key","key_info","strings","alert","test","PW","confirmPW","JSON","stringify","ID","nickname","name","Phone","Birth","_c","$RefreshReg$"],"sources":["C:/Users/junsung/OneDrive/문서/GitHub/B_C/b_c/src/Component/SignUp_function.js"],"sourcesContent":["// sign_up_function.js\r\nexport const Sign_Up = (formData, setFormData, navigate) => {\r\n  var passwordRegex = /^(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[!@#$%^&*?_]).{8,32}$/;\r\n\r\n  for (let key in formData) {\r\n    if (formData[key] === \"\") {\r\n      var key_info = \"\";\r\n      if (key === \"ID\") key_info = \"아이디\";\r\n      else if (key === \"PW\") key_info = \"비밀번호\";\r\n      else if (key === \"confirmPW\") key_info = \"비밀번호 재입력\";\r\n      else if (key === \"nickname\") key_info = \"별명\";\r\n      else if (key === \"name\") key_info = \"이름\";\r\n      else if (key === \"Phone\") key_info = \"전화번호\";\r\n      else if (key === \"Birth\") key_info = \"생년월일\";\r\n      const strings = key_info + \"를(을) 입력해주세요\";\r\n      alert(strings);\r\n      return;\r\n    }\r\n  }\r\n\r\n  if (!passwordRegex.test(formData.PW)) {\r\n    alert(\r\n      \"비밀번호는 8~32자 이내의 영문자, 숫자 및 특수 문자를 포함해야 합니다.\"\r\n    );\r\n    return;\r\n  }\r\n\r\n  if (formData.PW !== formData.confirmPW) {\r\n    alert(\"비밀번호가 일치하지 않습니다.\");\r\n    return;\r\n  }\r\n\r\n  alert(JSON.stringify(formData));\r\n\r\n  // 회원 가입 성공 시 초기화\r\n  setFormData({\r\n    ID: \"\",\r\n    PW: \"\",\r\n    confirmPW: \"\",\r\n    nickname: \"\",\r\n    name: \"\",\r\n    Phone: \"\",\r\n    Birth: \"\",\r\n  });\r\n\r\n  alert(\"회원가입 완료\");\r\n\r\n  navigate(\"/Login\");\r\n};\r\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,OAAO,GAAGA,CAACC,QAAQ,EAAEC,WAAW,EAAEC,QAAQ,KAAK;EAC1D,IAAIC,aAAa,GAAG,sDAAsD;EAE1E,KAAK,IAAIC,GAAG,IAAIJ,QAAQ,EAAE;IACxB,IAAIA,QAAQ,CAACI,GAAG,CAAC,KAAK,EAAE,EAAE;MACxB,IAAIC,QAAQ,GAAG,EAAE;MACjB,IAAID,GAAG,KAAK,IAAI,EAAEC,QAAQ,GAAG,KAAK,CAAC,KAC9B,IAAID,GAAG,KAAK,IAAI,EAAEC,QAAQ,GAAG,MAAM,CAAC,KACpC,IAAID,GAAG,KAAK,WAAW,EAAEC,QAAQ,GAAG,UAAU,CAAC,KAC/C,IAAID,GAAG,KAAK,UAAU,EAAEC,QAAQ,GAAG,IAAI,CAAC,KACxC,IAAID,GAAG,KAAK,MAAM,EAAEC,QAAQ,GAAG,IAAI,CAAC,KACpC,IAAID,GAAG,KAAK,OAAO,EAAEC,QAAQ,GAAG,MAAM,CAAC,KACvC,IAAID,GAAG,KAAK,OAAO,EAAEC,QAAQ,GAAG,MAAM;MAC3C,MAAMC,OAAO,GAAGD,QAAQ,GAAG,aAAa;MACxCE,KAAK,CAACD,OAAO,CAAC;MACd;IACF;EACF;EAEA,IAAI,CAACH,aAAa,CAACK,IAAI,CAACR,QAAQ,CAACS,EAAE,CAAC,EAAE;IACpCF,KAAK,CACH,4CACF,CAAC;IACD;EACF;EAEA,IAAIP,QAAQ,CAACS,EAAE,KAAKT,QAAQ,CAACU,SAAS,EAAE;IACtCH,KAAK,CAAC,kBAAkB,CAAC;IACzB;EACF;EAEAA,KAAK,CAACI,IAAI,CAACC,SAAS,CAACZ,QAAQ,CAAC,CAAC;;EAE/B;EACAC,WAAW,CAAC;IACVY,EAAE,EAAE,EAAE;IACNJ,EAAE,EAAE,EAAE;IACNC,SAAS,EAAE,EAAE;IACbI,QAAQ,EAAE,EAAE;IACZC,IAAI,EAAE,EAAE;IACRC,KAAK,EAAE,EAAE;IACTC,KAAK,EAAE;EACT,CAAC,CAAC;EAEFV,KAAK,CAAC,SAAS,CAAC;EAEhBL,QAAQ,CAAC,QAAQ,CAAC;AACpB,CAAC;AAACgB,EAAA,GA/CWnB,OAAO;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}