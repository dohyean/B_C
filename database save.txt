블로그
// 블로그 정보 (블로그의 번호 및 )
CREATE TABLE Blog_Data (
  Blog_ID INTEGER AUTO_INCREMENT,
  User_ID varchar(20) NOT NULL,
  Blog_Name varchar(30) NOT NULL,
  Blog_Description varchar(500),
  Blog_Visibility_Status INTEGER DEFAULT 1,
  Blog_Create_Time DATETIME DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (Blog_ID),
  FOREIGN KEY (User_ID) REFERENCES User_Data(User_ID)
);

// 게시물 정보
CREATE TABLE Blog_Post_Data (
  Post_ID INTEGER AUTO_INCREMENT,
  Blog_ID varchar(20) NOT NULL,
  Post_Title TEXT NOT NULL,
  Post_Content TEXT NOT NULL,
  Post_Visibility_Status INTEGER DEFAULT 1,
  Post_Create_Time DATETIME DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (Post_ID),
  FOREIGN KEY (Blog_ID) REFERENCES Blog_Data(Blog_ID)
);

// 댓글 정보
CREATE TABLE Blog_Comment_Data (
  Comment_ID INTEGER AUTO_INCREMENT,
  Post_ID INTGER NOT NULL,
  User_ID varchar(20) NOT NULL,
  Comment TEXT NOT NULL,
  Comment_Visibility_Status INTEGER DEFAULT 1,
  Comment_Report_Status INTEGER DEFAULT 0,
  Comment_Create_Time DATETIME DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (Comment_ID),
  FOREIGN KEY (Post_ID) REFERENCES Blog_Post_Data(Post_ID),
  FOREIGN KEY (User_ID) REFERENCES User_Data(User_ID)
);

// 카테고리 정보
CREATE TABLE Blog_Category_Data (
  Category_ID INTEGER AUTO_INCREMENT,
  User_ID varchar(20) NOT NULL,
  Category_Name VARCHAR(100) NOT NULL,
  Parent_Category_ID INTEGER,
  Child_Num INTEGER,
  PRIMARY KEY (Category_ID),
  FOREIGN KEY (User_ID) REFERENCES User_Data(User_ID),
  FOREIGN KEY (Parent_Category_ID) REFERENCES Blog_Category_Data(Category_ID)
);

// 블로그, 카테고리 관계 정보
CREATE TABLE Blog_BlogCategory_Association (
  Blog_ID INTEGER NOT NULL,
  Category_ID INTEGER NOT NULL,
  PRIMARY KEY (Blog_ID, Category_ID),
  FOREIGN KEY (Blog_ID) REFERENCES Blog_Data(Blog_ID),
  FOREIGN KEY (Category_ID) REFERENCES Blog_Category_Data(Category_ID)
);

// 게시물, 카테고리 관계 정보
CREATE TABLE Blog_PostCategory_Association (
    Post_ID INTEGER NOT NULL,
    Category_ID INTEGER NOT NULL,
    PRIMARY KEY (Post_ID, Category_ID),
    FOREIGN KEY (Post_ID) REFERENCES Blog_Post_Data(Post_ID),
    FOREIGN KEY (Category_ID) REFERENCES Blog_Category_Data(Category_ID)
);

// 타입 정보
CREATE TABLE Blog_Category_Type (
    // 해당 데이터는 이후에 채우기
    Category_ID INTEGER 
    PRIMARY KEY (Category_ID)
    FOREIGN KEY (Category_ID) REFERENCES Blog_Category_Data(Category_ID)
);


커뮤니티


유저 정보
// 유저 데이터 정보
CREATE TABLE User_Data(
  User_ID varchar(20),
  User_PW varchar(64) NOT NULL,
  User_NickName varchar(30) NOT NULL,
  User_Name varchar(30) NOT NULL,
  User_PhoneNum varchar(15) NOT NULL,
  User_Birthday varchar(15) NOT NULL,
  User_Create_Time DATETIME DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (User_ID)
);

// hash 데이터 정보
CREATE TABLE Hash_Data(
  User_ID varchar(20) REFERENCES User_Data(User_ID),
  User_Hash varchar(64),
  FOREIGN KEY (User_ID) REFERENCES User_Data(User_ID)
);


// 트리거 설정
CREATE TRIGGER User_Data_Insert
BEFORE INSERT ON User_Data
BEGIN
INSERT INTO Hash_Data (User_ID) VALUES (NEW.User_ID);
END;



insert into User_Data values('7', 'test', 'test', 'test', 'test', 'test');


drop table hash_data;

select * from hash_data;

delete from user_data where user_id = '7';





--------------------------------------------------
https://dbdiagram.io/d

// 유저 정보
Table User_Data{
  User_ID varchar(20) [ pk ]
  User_PW varchar(64) [not null]
  User_NickName varchar(30)
  User_Name varchar(20) [not null]
  User_PhoneNum varchar(20) [not null]
  User_Birthday varchar(15)
  User_SignUp_Time datetime [not null, default: `current_timestamp`]
}

Table Hash_Data {
  User_ID varchar(20) [primary key, ref: - User_Data.User_ID]
  User_Hash varchar(64)
}

// 블로그 정보
Table Blog_Data {
  Blog_ID integer [ pk, increment ] // auto-increment
  User_ID varchar(20) [ ref : > User_Data.User_ID ]
  Blog_Name text [not null]
  Blog_Description text
  Blog_Visibility_Status integer [default: 0]
  Blog_Create_Time datetime [not null, default: `current_timestamp`]
}

Table Blog_Post_Data {
  Post_ID integer [ pk, increment] // auto-increment
  Blog_ID varchar(20) [not null, ref: > Blog_Data.Blog_ID]
  Post_Title text [not null]
  Post_Content text [not null]
  Post_Visibility_Status integer [ default: 0 ]
  Post_Create_Time datetime [not null, default: `current_timestamp`]
}

Table Blog_Comment_Data {
  Comment_ID integer [ pk, increment] // auto-increment
  Post_ID integer [not null, ref: <> Blog_Post_Data.Post_ID]
  User_ID varchar(20) [not null, ref: > User_Data.User_ID]
  Comment text [not null]
  Comment_Visibility_Status integer [default: 0]
  Comment_Create_Time datetime [not null, default: `current_timestamp`]
}

Table Blog_Category_Data {
  Category_ID integer [pk, increment] // auto-increment
  User_ID varchar(20) [not null, ref: > User_Data.User_ID]
  Category_Name varchar(100) [not null]
  Parent_Category_ID integer [ref: > Blog_Category_Data.Category_ID]
  Child_Num integer [not null, default: 0]
}














